// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// Extrusion処理の説明[extrushion.cpp]
// Author : Koki Nishiyama
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Extrusion.h"
#include "3Dline.h"

#ifdef _DEBUG
#include "debugproc.h"
#include "debugcollision.h"
#endif // _DEBUG

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define EXTRUSION_FILE "data/LOAD/collision.txt"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// グローバル変数
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CExtrusion::CExtrusion() : CScene::CScene()
{
	// 初期化
	m_ppos = NULL;	// 位置情報
	m_fRadius = 0;	// 半径情報
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CExtrusion::~CExtrusion()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CExtrusion::Init(void)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CExtrusion::Uninit(void)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CExtrusion::Update(void)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CExtrusion::Draw(void)
{
}

#ifdef _DEBUG
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CExtrusion::Debug(void)
{
}
#endif // _DEBUG

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 生成処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CExtrusion * CExtrusion::Create(
	D3DXVECTOR3 *pos,
	float const &fRadius
)
{
	// 変数宣言
	CExtrusion * pExtrusion;	// 当たり判定
	// メモリ確保
	pExtrusion = new CExtrusion;
	// シーン管理設定
	pExtrusion->ManageSetting(CScene::LAYER_COLLISION);
	// 設定
	// 位置設定
	pExtrusion->SetPos(pos);
	// 半径設定
	pExtrusion->SetRadius(fRadius);
	// 初期化
	pExtrusion->Init();
	// 返す
	return pExtrusion;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 箱型の当たり判定処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool CExtrusion::CircleCollision(void)
{
	// 変数宣言
	CExtrusion * pExtrusion = NULL;
	bool bOn = false;			// 上にいるかどうか
								// 当たり判定同士の比較
	for (int nCntLayer = 0; nCntLayer < CScene::GetMaxLayer(CScene::LAYER_COLLISION); nCntLayer++)
	{
		// 情報取得
		pExtrusion = (CExtrusion*)CScene::GetScene(CScene::LAYER_COLLISION, nCntLayer, CExtrusion());	// 当たり判定
		// 条件を満たしているか
		if (pExtrusion == NULL ||	// ヌルチェック
			pExtrusion == this)		// 同じ情報
		{
			continue;
		}
		// 不使用状態 |
		// ->ループスキップ
		if (m_bUse == false)
		{
			continue;
		}
		// 変数宣言
		// 距離
		D3DXVECTOR3 diffpos = CCalculation::Difference_Between(
			*this->m_ppos,
			*pExtrusion->m_ppos);

		// お互いの最大距離ポイント
		float fDiffPower;
		fDiffPower = this->m_fRadius + pExtrusion->m_fRadius;

		//お互いの距離
		float fLength = D3DXVec2Length(&D3DXVECTOR2(diffpos.x, diffpos.z));
		
		// 長さの比較
		if (fLength < fDiffPower)
		{
			// 自分から相手の角度
			float fRot = atan2f(diffpos.x, diffpos.z);
			// Extrusion処理
			m_ppos->x = pExtrusion->m_ppos->x + sinf(fRot) * fDiffPower;
			m_ppos->z = pExtrusion->m_ppos->z + cosf(fRot) * fDiffPower;
		}
	}
	return bOn;
}