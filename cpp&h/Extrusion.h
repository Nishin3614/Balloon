// ----------------------------------------------------------------------------------------------------
//
// Extrusionヘッダー処理の説明[extrushion.h]
// Author : Koki Nishiyama
//
// ----------------------------------------------------------------------------------------------------

#ifndef _EXTRUSION_H_
#define _EXTRUSION_H_	 // ファイル名を基準を決める

// ----------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------
#include "scene.h"

// ----------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------
#define EXTRUSION_MAX (128)

// ----------------------------------------------------------------------------------------------------
//
// Extrusion種類
//
// ----------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------
//
// 構造体定義
//
// ----------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 名前定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 前方宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// クラス
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CExtrusion : public CScene
{
public:
	/* 構造体 */

	/* 関数 */
	CExtrusion();
	~CExtrusion();
	void Init(void);
	void Uninit(void);
	void Update(void);
	void Draw(void);
#ifdef _DEBUG
	void Debug(void);
#endif // _DEBUG
	// 当たった後の処理
	// 引数1:オブジェクトタイプ
	// 引数2:相手のシーン情報
	virtual void Scene_Collision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	)
	{};
	// ポインター位置情報を取得
	D3DXVECTOR3 * Scene_GetPPos(void) { return m_ppos; };
	// ポインター過去の位置情報を取得
	D3DXVECTOR3 * Scene_GetPPosold(void) { return NULL; };
	// ポインター移動量情報の取得
	D3DXVECTOR3 * Scene_GetPMove(void) { return NULL; };

	// 作成
	static CExtrusion * Create(
		D3DXVECTOR3 *pos,
		float const &fRadius
	);
	// 設定
	// 位置設定
	void SetPos(D3DXVECTOR3 *pos) { m_ppos = pos; };
	// 半径設定
	void SetRadius(float const &fRadius) { m_fRadius = fRadius; };
	// 使用設定
	void SetUse(bool const &bUse) { m_bUse = bUse; };
	// 使用取得
	bool GetUse(void) { return m_bUse; };
	// 当たり判定
	bool CircleCollision(void);
protected:

private:
	/* 関数 */
	/* 変数 */
	D3DXVECTOR3 *m_ppos;				// 位置情報
	float m_fRadius;					// 半径情報
	bool m_bUse;						// 使用
};

// ----------------------------------------------------------------------------------------------------
//
// プロトタイプ宣言
//
// ----------------------------------------------------------------------------------------------------

#endif