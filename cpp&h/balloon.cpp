// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 風船処理の説明[balloon.cpp]
// Author : Koki Nishiyama
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "balloon.h"
#include "collision.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// イニシャライザコンストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon::CBalloon() : CScene_X::CScene_X()
{
	m_bCollision = false;
	m_pParentPos = NULL;
	m_Offsetpos = D3DVECTOR3_ZERO;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon::~CBalloon()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Init(void)
{
	CScene_X::Init();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Uninit(void)
{
	CScene_X::Uninit();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Update(void)
{
	// 位置更新
	SetPos(m_Offsetpos + *m_pParentPos);
	// 更新処理
	CScene_X::Update();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Draw(void)
{
	CScene_X::Draw();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Scene_MyCollision(
	int const &nObjType,		// オブジェクトタイプ
	CScene * pScene				// 相手のシーン情報
)
{
	// 相手のオブジェクトタイプがキャラクターなら
	if (nObjType == CCollision::OBJTYPE_CHARACTER)
	{
		// 当たっている判定をtrueへ
		m_bCollision = true;
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Scene_OpponentCollision(
	int const &nObjType,		// オブジェクトタイプ
	CScene * pScene				// 相手のシーン情報
)
{
	// 相手のオブジェクトタイプがキャラクターなら
	if (nObjType == CCollision::OBJTYPE_CHARACTER)
	{
		// 当たっている判定をtrueへ
		m_bCollision = true;
	}
}

#ifdef _DEBUG
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Debug(void)
{
	CScene_X::Debug();
}
#endif // _DEBUG

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// あたり判定を強制的に削除
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::CollisionDelete(void)
{

}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(シーン管理)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon * CBalloon::Create(
	D3DXVECTOR3 const &pos,
	D3DXVECTOR3 * pPos,
	D3DXVECTOR3 const & rot,
	int const & nModelId,
	bool const & bShadowMap
)
{
	// 変数宣言
	CBalloon * pBalloon;		// シーン3Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pBalloon = new CBalloon();
	// シーン管理設定
	pBalloon->ManageSetting(CScene::LAYER_3DOBJECT);
	// 設定
	pBalloon->m_pParentPos = pPos;
	pBalloon->m_Offsetpos = pos;
	pBalloon->SetPos(pBalloon->m_Offsetpos + *pBalloon->m_pParentPos);
	pBalloon->SetRot(rot);
	pBalloon->SetModelId(nModelId);
	pBalloon->SetShadowMap(bShadowMap);
	// 初期化処理
	pBalloon->Init();

	// 生成したオブジェクトを返す
	return pBalloon;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(個人管理)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon * CBalloon::Create_Self(
	D3DXVECTOR3 const &pos,
	D3DXVECTOR3 * pPos,
	D3DXVECTOR3 const & rot,
	int const & nModelId,
	bool const & bShadowMap
)
{
	// 変数宣言
	CBalloon * pBalloon;		// シーンXクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pBalloon = new CBalloon();
	// 設定
	pBalloon->m_pParentPos = pPos;
	pBalloon->m_Offsetpos = pos;
	pBalloon->SetPos(pos);
	pBalloon->SetRot(rot);
	pBalloon->SetModelId(nModelId);
	pBalloon->SetShadowMap(bShadowMap);
	// 初期化処理
	pBalloon->Init();
	// 生成したオブジェクトを返す
	return pBalloon;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(個人管理)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CBalloon> CBalloon::Create_Uni(
	D3DXVECTOR3 const &pos,
	D3DXVECTOR3 * pPos,
	D3DXVECTOR3 const & rot,
	int const & nModelId,
	bool const & bShadowMap
)
{
	// 変数宣言
	std::unique_ptr<CBalloon> pBalloon(new CBalloon);		// シーンXクラス
	// 設定
	pBalloon->m_pParentPos = pPos;
	pBalloon->m_Offsetpos = pos;
	pBalloon->SetPos(pos);
	pBalloon->SetRot(rot);
	pBalloon->SetModelId(nModelId);
	pBalloon->SetShadowMap(bShadowMap);
	// 初期化処理
	pBalloon->Init();
	// 生成したオブジェクトを返す
	return pBalloon;
}