// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 風船処理の説明[balloon.cpp]
// Author : Koki Nishiyama
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "balloon.h"
#include "p_thunder.h"
#include "3Dparticle.h"
#include "selectcharacter.h"
#include "spherecollision.h"
#include "circleshadow.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define BALLOON_SPEED (10.0f)
#define BALLOON_Y (50.0f)
#define BALLOON_RADIUS (50.0f)

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon::CBalloon() : CScene::CScene()
{
	// 初期化
	m_nPopBalloon = 2;
	m_nBringBalloon = 0;
	m_mtx = NULL;
	m_fAngleBalloon = 0;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon::~CBalloon()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Init(void)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Uninit(void)
{
	// 終了処理
	for (int nCntBalloon = 0; nCntBalloon < (signed)m_apSceneX.size(); nCntBalloon++)
	{
		// シーンXのNULLチェック
		// ->ループスキップ
		if (m_apSceneX[nCntBalloon] == NULL) continue;
		m_apSceneX[nCntBalloon]->Uninit();
		delete m_apSceneX[nCntBalloon];
		m_apSceneX[nCntBalloon] = NULL;
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Update(void)
{
	// シーンXの更新処理
	for (int nCntBalloon = 0; nCntBalloon < (signed)m_apSceneX.size(); nCntBalloon++)
	{
		// シーンXのNULLチェック
		// ->ループスキップ
		if (m_apSceneX[nCntBalloon] == NULL) continue;
		// 更新
		m_apSceneX[nCntBalloon]->Update();
		// 風船が割れる処理
		BreakBalloon(nCntBalloon);
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Draw(void)
{
	// シーンXの更新処理
	for (int nCntBalloon = 0; nCntBalloon < (signed)m_apSceneX.size(); nCntBalloon++)
	{
		// シーンXのNULLチェック
		// ->ループスキップ
		if (m_apSceneX[nCntBalloon] == NULL) continue;
		// 描画
		m_apSceneX[nCntBalloon]->Draw();
	}
}

#ifdef _DEBUG
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Debug(void)
{
	/*
	CDebugproc::Print("所持している風船の数[%d]\n", m_nBringBalloon);
	CDebugproc::Print("出現している風船の数[%d]\n", m_nPopBalloon);
	*/
}
#endif // _DEBUG

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 行列情報設定処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::SetMatrix(D3DXMATRIX * mtx)
{
	// 行列情報のポインターをコピーする
	m_mtx = mtx;
	// シーンXの親行列情報設定処理
	for (int nCntBalloon = 0; nCntBalloon < (signed)m_apSceneX.size(); nCntBalloon++)
	{
		// シーンXのNULLチェック
		// ->ループスキップ
		if (m_apSceneX[nCntBalloon] == NULL) continue;
		// 親行列の設定
		m_apSceneX[nCntBalloon]->SetParentMtx(m_mtx);
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 外に出して置ける風船の最大個数を設定
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::SetPopMaxBalloom(
	int const & nPopMaxBaloon,
	CScene * pParent
)
{
	// 最大出現数を代入
	m_nMaxPopBalloon = nPopMaxBaloon;
	// 角度
	m_fAngleBalloon = D3DX_PI / m_nMaxPopBalloon * 2;
	// 初期設定
	for (int nCntBalloon = 0; nCntBalloon < m_nMaxPopBalloon; nCntBalloon++)
	{
		//風船生成
		m_apSceneX.push_back(CScene_X::Create_Self(
			D3DXVECTOR3(
				sinf(m_fAngleBalloon * (nCntBalloon + 1)) * BALLOON_RADIUS,
				BALLOON_Y,
				cosf(m_fAngleBalloon * (nCntBalloon + 1)) * BALLOON_RADIUS),
				D3DVECTOR3_ZERO,
				0
			));
		// 当たり判定設定(球)
		m_apSceneX[nCntBalloon]->SetCollision(
			CShape::SHAPETYPE_SPHERE,
			CCollision::OBJTYPE_BALLOON,
			false,
			pParent
		);
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 風船を生成処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::CreateBalloon(
	CScene * pParent
)
{
	// 風船生成処理
	for (int nCntBalloon = 0; nCntBalloon < (signed)m_apSceneX.size(); nCntBalloon++)
	{
		// シーンXのNULLチェック
		// ->ループスキップ
		if (m_apSceneX[nCntBalloon] != NULL) continue;
		// プレイヤー(雷)生成
		m_apSceneX[nCntBalloon] = CScene_X::Create_Self(
			D3DXVECTOR3(
				sinf(m_fAngleBalloon * (nCntBalloon + 1)) * BALLOON_RADIUS,
				BALLOON_Y,
				cosf(m_fAngleBalloon * (nCntBalloon + 1)) * BALLOON_RADIUS),
			D3DVECTOR3_ZERO,
			0
		);
		// 当たり判定設定(球)
		m_apSceneX[nCntBalloon]->SetCollision(
			CShape::SHAPETYPE_SPHERE,
			CCollision::OBJTYPE_BALLOON,
			false,
			pParent
		);
		// 親行列の設定
		m_apSceneX[nCntBalloon]->SetParentMtx(m_mtx);
		// 持っている風船の個数を減らす
		m_nBringBalloon--;
		// 出現している風船の個数を増やす
		m_nPopBalloon++;
		// エフェクトを用意するならここ




		// 生成処理が終了したら
		// ->関数を抜ける
		break;
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// シーンX情報取得処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CScene_X * CBalloon::GetSceneX(int const & nBalloon)
{
	// 0 < nBalloon <= BALLOON_MAXなら
	// ->関数を抜ける
	if (nBalloon < 0 || nBalloon >= (signed)m_apSceneX.size())
	{
#ifdef _DEBUG
		CCalculation::Messanger("CBalloon::GetSceneX->上限越え");
#endif // _DEBUG
		return NULL;
	}
	// シーンXの情報を返す
	return m_apSceneX[nBalloon];
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon * CBalloon::Create(
	D3DXMATRIX *mtx,			// 行列
	int const &nPopMaxBalloon,	// 最大風船数
	CScene * pParent			// 親情報
)
{
	// 変数宣言
	CBalloon * pBalloon;		// シーン3Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pBalloon = new CBalloon();
	// シーン管理設定
	pBalloon->ManageSetting(CScene::LAYER_3DOBJECT);
	// 初期化処理
	pBalloon->Init();
	// 外に出して置ける風船の最大個数を設定
	pBalloon->SetPopMaxBalloom(
		nPopMaxBalloon,
		pParent
	);
	// 出現している風船の個数に代入する
	pBalloon->m_nPopBalloon = nPopMaxBalloon;
	// 行列情報設定
	pBalloon->SetMatrix(mtx);
	// 生成したオブジェクトを返す
	return pBalloon;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// リソース情報読み込む設定
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CBalloon::Load(void)
{
	return S_OK;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだリソース情報を開放する
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::UnLoad(void)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 風船が割れる処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::BreakBalloon(int const &nCntBalloon)
{
	// 当たり判定状態がtrueなら
	// ->開放
	if (m_apSceneX[nCntBalloon]->GetbCollision())
	{
		m_apSceneX[nCntBalloon]->Uninit();
		delete m_apSceneX[nCntBalloon];
		m_apSceneX[nCntBalloon] = NULL;
		// 出現している風船の個数を増やす
		m_nPopBalloon--;
	}
}