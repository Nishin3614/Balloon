// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 風船処理の説明[balloon.cpp]
// Author : Koki Nishiyama
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "balloon.h"
#include "player.h"
#include "3Dparticle.h"
#include "game.h"
#include "spherecollision.h"
#include "circleshadow.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define BALLOON_SPEED (10.0f)

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon::CBalloon() : CScene_X::CScene_X()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon::~CBalloon()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Init(void)
{
	CScene_X::Init();
	CScene_X::SetModelId(3);
	// 球の当たり判定
	m_Collision = CSphereCollision::Create_Self(
		D3DVECTOR3_ZERO,
		CScene_X::GetPos(),
		3
	);
	// 円形シャドウの生成
	m_pCircleShadow = CCircleshadow::Create(
		CScene_X::GetPos(),
		D3DXVECTOR3(20.0f, 0.0f, 20.0f));
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Uninit(void)
{
	CScene_X::Uninit();
	// 円形シャドウ開放
	if (m_pCircleShadow != NULL)
	{
		m_pCircleShadow->Release();
		m_pCircleShadow->Uninit();
		delete m_pCircleShadow;
		m_pCircleShadow = NULL;
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Update(void)
{
	// 当たり判定
	//Collision();

	// 変数宣言
	D3DXVECTOR3 ShadowPos = CScene_X::GetPos();
	// yの座標を床に合わせる
	ShadowPos.y = 0.1f;
	// 円形シャドウの生成
	m_pCircleShadow->SetPos(ShadowPos);
	m_pCircleShadow->Set_Vtx_Pos(CScene_THREE::OFFSET_TYPE_SIDE_CENTER);
	// 円形シャドウ更新
	if (m_pCircleShadow != NULL)
	{
		m_pCircleShadow->Update();
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Draw(void)
{
	// 風船の描画
	CScene_X::Draw();
	// 円形シャドウ描画
	if (m_pCircleShadow != NULL)
	{
		m_pCircleShadow->Draw();
	}
}

#ifdef _DEBUG
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Debug(void)
{
}
#endif // _DEBUG

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBalloon * CBalloon::Create(
	D3DXVECTOR3 const &pos,						// 位置
	D3DXVECTOR3 const &rot						// 回転
)
{
	// 変数宣言
	CBalloon * pBalloon;		// シーン3Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pBalloon = new CBalloon();
	// シーン管理設定
	pBalloon->ManageSetting(CScene::LAYER_3DOBJECT);
	// 初期化処理
	pBalloon->Init();
	// 位置設定
	pBalloon->SetPos(pos);
	// 回転設定
	pBalloon->SetRot(rot);
	// 生成したオブジェクトを返す
	return pBalloon;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// リソース情報読み込む設定
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CBalloon::Load(void)
{
	return S_OK;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだリソース情報を開放する
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::UnLoad(void)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 移動処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Move(void)
{
	// 変数宣言
	D3DXVECTOR3 pos;
	// 情報取得
	pos = CScene_X::GetPos();	// 位置
	// 位置更新
	pos.x += sinf(CScene_X::GetRot().y + D3DX_PI) * BALLOON_SPEED;
	pos.z += cosf(CScene_X::GetRot().y + D3DX_PI) * BALLOON_SPEED;
	// 位置設定
	CScene_X::SetPos(pos);
	// シーンX更新
	CScene_X::Update();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たり判定
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBalloon::Collision(void)
{
	// 当たり判定の更新
	m_Collision->GetShape()->PassPos(CScene_X::GetPos());
}
