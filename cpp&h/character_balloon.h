// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// バルーンキャラクター処理 [character_balloon.h]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifndef _CHARACTER_BALLOON_H_
#define _CHARACTER_BALLOON_H_

#define _CRT_SECURE_NO_WARNINGS

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// インクルードファイル
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "character.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// マクロ定義
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 前方宣言
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CBalloon_group;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// クラス
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CCharacter_Balloon : public CCharacter
{
public:
	// ---------モーションタイプ---------- //
	typedef enum
	{
		MOTIONTYPE_MAX = CCharacter::MOTIONTYPE_MAX
	} MOTIONTYPE;
	// ---------キャラクタータイプ---------- //
	typedef enum
	{
		CHARATYPE_THUNDER = 0,
		CHARATYPE_ZOMBIE,
		CHARATYPE_MAX
	} CHARATYPE;
	/* 関数 */
	CCharacter_Balloon(CCharacter::CHARACTER const &character);
	virtual ~CCharacter_Balloon();
	virtual void Init(void);
	virtual void Uninit(void);
	virtual void Update(void);
	virtual void Draw(void);
	// バルーンキャラクターが死んだときの関数
	virtual void Die(void);
	// 当たった後の処理
	//	nObjType	: オブジェクトタイプ
	//	pScene		: 相手のシーン情報
	virtual void Scene_MyCollision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	);
	// 相手に当てられた後の処理
	//	nObjType	: オブジェクトタイプ
	//	pScene		: 相手のシーン情報
	virtual void Scene_OpponentCollision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	);
	// バルーンの情報取得
	CBalloon_group * GetBalloon(void) { return m_pBalloon_group; };
#ifdef _DEBUG
	void Debug(void);
#endif
	// 風船がない場合
	bool BalloonNone(void);
	// 風船を生成する処理
	void BalloonCreate(void);
	// 風船を強制的に割らせる処理
	// nBreakBalloon:割れる風船の個数
	void Thunder_BreakBalloon(void);
	// _DEBUG
	static HRESULT Load(void);			// 読み込み
	static void UnLoad(void);			// UnLoadする
protected:
private:
	/* 構造体 */
	/* 関数 */

	/* 変数 */
	CBalloon_group					* m_pBalloon_group;				// 風船グループ情報

};
#endif
