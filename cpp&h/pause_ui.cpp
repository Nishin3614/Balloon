// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ポーズ用ui処理の説明[pause_ui.cpp]
// Author : Koki Nishiyama
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 描画 */
#include "pause_ui.h"
#include "pause.h"
#include "fade.h"
#include "game.h"
#include "ui.h"
#include "cameraconfig.h"
#include "camera.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// グローバル変数
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 選択
int CPause_ui::m_nSelect = 0;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CPause_ui::CPause_ui()
{
	m_nSelect = 0;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CPause_ui::~CPause_ui()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::Init(void)
{
	// 選択番号の初期化
	m_nSelect = 0;
	// 背景の生成
	m_BgUi = std::move(CUi::LoadCreate_Self(CUi::UITYPE_PAUSEUI_BG));
	// 選択UIの生成
	m_uni_SelectUi = std::move(CScene_TWO::Creat_Unique(
		CScene_TWO::OFFSET_TYPE_CENTER,
		D3DVECTOR3_ZERO,
		{350.0f,100.0f},
		0.0f,
		{ 0.0f,0.0f,0.0f,0.5f }
	));
	// UIの生成
	m_Ui = std::move(CUi::LoadCreate_Self(
		CUi::UITYPE_PAUSEUI_SELECT
	));
	// カメラ設定の生成
	m_uni_CameraConfig = std::move(CCameraconfig::Create_Self());
	// 選択UIの位置を設定する
	m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
	m_uni_SelectUi->Set_Vtx_Pos();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::Uninit(void)
{
	// 変数宣言
	int nCntUi = 0;
	// 背景の終了処理
	for (nCntUi = 0; nCntUi < (signed)m_BgUi.size(); nCntUi++)
	{
		m_BgUi[nCntUi]->Uninit();
	}
	// 選択UIの終了処理
	if (m_uni_SelectUi != NULL)
	{
		m_uni_SelectUi->Uninit();
	}
	// PauseUIの終了処理
	for (nCntUi = 0; nCntUi < (signed)m_Ui.size(); nCntUi++)
	{
		m_Ui[nCntUi]->Uninit();
	}
	// カメラ設定の終了処理
	if (m_uni_CameraConfig != NULL)
	{
		m_uni_CameraConfig->Uninit();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::Update(void)
{
	// 変数宣言
	int nCntUi = 0;
	// カメラ設定状態がfalseなら
	if (CCameraconfig::GetConfig() == false)
	{
		/* ジョイパッド */
		if (CManager::GetJoy() != NULL)
		{
			// スティックの下方向に傾けたとき |
			// 下矢印が押されたとき |
			// ->次の項目へ
			if (CManager::GetJoy()->GetBoolStickLeft(0, CJoypad::DIRECTION_DOWN) ||
				CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_DOWN))
			{
				m_nSelect++;
				// 上限超えたら
				if (m_nSelect >= PAUSE_UI_MAX)
				{
					m_nSelect = PAUSE_UI_CONTINUE;
				}
				// 選択UIの位置更新
				m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
				m_uni_SelectUi->Set_Vtx_Pos();
				// カーソル音
				CManager::GetSound()->PlaySound(CSound::LABEL_SE_SELECTEDSOUND1);
			}
			// スティックの上方向に傾けたとき |
			// 上矢印が押されたとき |
			// ->前の項目へ
			else if (CManager::GetJoy()->GetBoolStickLeft(0, CJoypad::DIRECTION_UP) ||
				CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_UP))
			{
				m_nSelect--;
				// 下限超えたら
				if (m_nSelect < PAUSE_UI_CONTINUE)
				{
					m_nSelect = PAUSE_UI_OPSION;
				}
				// 選択UIの位置更新
				m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
				m_uni_SelectUi->Set_Vtx_Pos();
				// カーソル音
				CManager::GetSound()->PlaySound(CSound::LABEL_SE_SELECTEDSOUND1);
			}
			// Bボタンを押したら |
			// ->選択している項目の処理
			if (CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_B))
			{
				Select();
			}
		}
		/* キーボード */
		// 下矢印を押したら |
		// Sボタンを押したら |
		// ->次の項目へ
		if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_DOWN) ||
			CManager::GetKeyboard()->GetKeyboardTrigger(DIK_S))
		{
			m_nSelect++;
			// 上限超えたら
			if (m_nSelect >= PAUSE_UI_MAX)
			{
				m_nSelect = PAUSE_UI_CONTINUE;
			}
			// 選択UIの位置更新
			m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
			m_uni_SelectUi->Set_Vtx_Pos();
			// カーソル音
			CManager::GetSound()->PlaySound(CSound::LABEL_SE_SELECTEDSOUND1);
		}
		// 上矢印を押したら |
		// Wボタンを押したら |
		// ->前の項目へ
		else if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_UP) ||
			CManager::GetKeyboard()->GetKeyboardTrigger(DIK_W))
		{
			m_nSelect--;
			// 下限超えたら
			if (m_nSelect < PAUSE_UI_CONTINUE)
			{
				m_nSelect = PAUSE_UI_OPSION;
			}
			// 選択UIの位置更新
			m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
			m_uni_SelectUi->Set_Vtx_Pos();
			// カーソル音
			CManager::GetSound()->PlaySound(CSound::LABEL_SE_SELECTEDSOUND1);
		}
		// エンター押したら |
		// ->選択している項目の処理
		if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_RETURN))
		{
			Select();
		}
		// ポーズ終了
		if (CManager::GetKeyConfig()->GetKeyConfigTrigger(CKeyConfig::CONFIG_BACK) ||
			CManager::GetKeyConfig()->GetKeyConfigTrigger(CKeyConfig::CONFIG_POUSE))
		{
			CManager::GetGame()->SetState(CGame::STATE_NORMAL);
			CScene::UpdateStop(false);
			// メニュー音
			CManager::GetSound()->PlaySound(CSound::LABEL_SE_SELECTEDSOUND2);
			// 選択番号初期化
			m_nSelect = 0;
			// 選択UIの位置更新
			m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
			m_uni_SelectUi->Set_Vtx_Pos();
			return;
		}
		/* 各UIの更新処理 */
		// 背景の更新処理
		for (nCntUi = 0; nCntUi < (signed)m_BgUi.size(); nCntUi++)
		{
			m_BgUi[nCntUi]->Update();
		}
		// 選択UIの更新処理
		if (m_uni_SelectUi != NULL)
		{
			m_uni_SelectUi->Update();
		}
		// UIの更新処理
		for (nCntUi = 0; nCntUi < (signed)m_Ui.size(); nCntUi++)
		{
			m_Ui[nCntUi]->Update();
		}
	}
	// カメラ設定状態がtrueなら
	else
	{
		// カメラ設定の終了処理
		if (m_uni_CameraConfig != NULL)
		{
			m_uni_CameraConfig->Update();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::Draw(void)
{
	// 変数宣言
	int nCntUi = 0;
	// 背景の描画処理
	for (nCntUi = 0; nCntUi < (signed)m_BgUi.size(); nCntUi++)
	{
		m_BgUi[nCntUi]->Draw();
	}
	// 選択UIの描画処理
	if (m_uni_SelectUi != NULL)
	{
		m_uni_SelectUi->Draw();
	}
	// UIの描画処理
	for (nCntUi = 0; nCntUi < (signed)m_Ui.size(); nCntUi++)
	{
		m_Ui[nCntUi]->Draw();
	}
	// カメラ設定状態がtrueなら
	if (CCameraconfig::GetConfig() == true)
	{
		// カメラ設定の終了処理
		if (m_uni_CameraConfig != NULL)
		{
			m_uni_CameraConfig->Draw();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 全体の初期化
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::SelfInit(void)
{
	// 選択初期化
	m_nSelect = 0;
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::Debug(void)
{
}
#endif // _DEBUG

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CPause_ui::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::UnLoad(void)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CPause_ui> CPause_ui::Create_Self(void)
{
	// 変数宣言
	std::unique_ptr<CPause_ui> pPause_ui(new CPause_ui);
	// 初期化処理
	pPause_ui->Init();
	// 生成したオブジェクトを返す
	return pPause_ui;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 選択処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CPause_ui::Select(void)
{
	// エンター音
	CManager::GetSound()->PlaySound(CSound::LABEL_SE_SELECTEDSOUND2);

	// ゲームに戻る
	if (m_nSelect == PAUSE_UI_CONTINUE)
	{
		CManager::GetGame()->SetState(CGame::STATE_NORMAL);
		CScene::UpdateStop(false);
		// 選択状態の設定
		CManager::GetGame()->SetState(CGame::STATE_NORMAL);
		// 選択を初期化
		m_nSelect = 0;
	}
	// もう一度プレイ
	else if (m_nSelect == PAUSE_UI_RESTART)
	{
		// 画面遷移の状態が遷移していない状態だったら
		if (CManager::GetFade()->GetFade() == CFade::FADE_NONE)
		{
			CManager::GetFade()->SetFade(CManager::MODE_GAME);
			CScene::UpdateStop(false);
			// 選択状態の設定
			CManager::GetGame()->SetState(CGame::STATE_NORMAL);
		}
		// 選択を初期化
		m_nSelect = 0;
	}
	// カメラ設定
	else if (m_nSelect == PAUSE_UI_OPSION)
	{
		// カメラ設定状態
		CCameraconfig::SetConfig(true);
	}
}
