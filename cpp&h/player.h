// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// モデル処理 [player.h]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifndef _PLAYER_H_
#define _PLAYER_H_

#define _CRT_SECURE_NO_WARNINGS

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// インクルードファイル
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "character_balloon.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// マクロ定義
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 前方宣言
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class C2DGauge;		// 2Dゲージクラス

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// クラス
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CPlayer : public CCharacter_Balloon
{
public:
	// ---------モーションタイプ---------- //
	typedef enum
	{
		MOTIONTYPE_MAX = CCharacter::MOTIONTYPE_MAX
	} MOTIONTYPE;
	// ---------キャラクタータイプ---------- //
	typedef enum
	{
		CHARATYPE_SPEED_UP = 0,
		CHARATYPE_REVIVAL,
		CHARATYPE_INVISIBLE,
		CHARATYPE_ATTACK_UP,
		CHARATYPE_MAX
	} CHARATYPE;
	/* 関数 */
	CPlayer(CCharacter::CHARACTER const &character);
	virtual ~CPlayer();
	virtual void Init(void);
	virtual void Uninit(void);
	virtual void Update(void);
	virtual void Draw(void);
	// プレイヤーが死んだときの関数
	virtual void Die(void);
	void OtherDie(void);
	// 当たった後の処理
	//	nObjType	: オブジェクトタイプ
	//	pScene		: 相手のシーン情報
	virtual void Scene_MyCollision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	);
	// 相手に当てられた後の処理
	//	nObjType	: オブジェクトタイプ
	//	pScene		: 相手のシーン情報
	virtual void Scene_OpponentCollision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	);
	// プレイヤー番号の設定
	void SetPlayerID(int const &nPlayerID) { m_nPlayerID = nPlayerID; };
	// プレイヤー番号の取得
	int const &GetPlayerID(void) { return m_nPlayerID; };
	// MPのフラグ取得
	bool const &GetMPMax(void) { return m_bMPMax; }
#ifdef _DEBUG
	void Debug(void);
#endif // _DEBUG
	static HRESULT Load(void);			// 読み込み
	static void UnLoad(void);			// UnLoadする
	// MP上げ処理
	//	nMpUp	: MP上げ値
	void MpUp(int const & nMpUp);

protected:
private:
	/* 構造体 */
	/* 関数 */
	void MyMove(void);					// 自キャラ移動処理
	void MyAction(const int &nId);		// 自キャラ行動処理
	void Camera(void);					// カメラ処理
	void OtherMove(void);				// 他キャラ移動処理
	void OtherAction(void);				// 他キャラ行動処理
	void FishApponent(void);			// 魚が出現

	/* 変数 */
	static int	m_All;					// 総数
	C2DGauge	*m_p2DMPGauge;			// MPゲージ
	D3DXVECTOR3	m_posold;				// 前の位置
	int m_nPlayerID;					// 番号
	int m_nCntFishApponent;				// 魚出現カウント
	int m_nMP;							// MP
	bool m_bMPMax;						// MPが最大かどうか
	bool m_bResetMP;					// MPをリセット
};
#endif
