// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// RectCollision処理の説明[rectcollision.cpp]
// Author : Koki Nishiyama
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "RectCollision.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RECTCOLLISION_FILE "data/LOAD/collision.txt"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// グローバル変数
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CRectCollision::CRectCollision() : CCollision::CCollision()
{
	// 初期化
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CRectCollision::Init(void)
{

}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たり判定処理(矩形と矩形)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool CRectCollision::Judg(CRectShape * const RectShape)
{
	return RectAndRect(this->m_pRectShape.get(),RectShape);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たり判定処理(矩形と球)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool CRectCollision::Judg(CSphereShape * const SphereShape)
{
	return RectAndSphere(this->m_pRectShape.get(), SphereShape);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たり判定処理(矩形と円柱)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool CRectCollision::Judg(CColumnShape * const ColumnShape)
{
	return RectAndColumn(this->m_pRectShape.get(), ColumnShape);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(シーン管理)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CRectCollision *CRectCollision::Create(
	D3DXVECTOR3 const offset,
	D3DXVECTOR3 const size,
	OBJTYPE const &obj
)
{
	// 変数宣言
	CRectCollision *pRectCollision;
	// メモリ確保
	pRectCollision = new CRectCollision();
	// 矩形の設定
	pRectCollision->m_pRectShape = CRectShape::Create(offset,size);
	pRectCollision->SetObjectID(obj);												// オブジェクト番号設定
	// シーン管理設定
	pRectCollision->ManageSetting(CScene::LAYER_COLLISION);
	// 初期化処理
	pRectCollision->Init();
	return pRectCollision;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(個人管理)
// ※返り値はstd::moveで受け取ること
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
unique_ptr<CRectCollision> CRectCollision::Create_Self(
	D3DXVECTOR3 const offset,
	D3DXVECTOR3 const size,
	OBJTYPE const &obj
)
{
	// 変数宣言
	unique_ptr<CRectCollision> pRectCollision(new CRectCollision);
	// 矩形の設定
	pRectCollision->m_pRectShape = std::move(CRectShape::Create(offset, size));
	pRectCollision->SetObjectID(obj);												// オブジェクト番号設定
	// 初期化処理
	pRectCollision->Init();
	return pRectCollision;
}
