// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 選択画面処理 [select.cpp]
// Author : KOKI NISHIYAMA
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "select.h"
/* 描画 */
#include "fade.h"
#include "p_thunder.h"
#include "p_zombie.h"
#include "meshsphere.h"
#include "3Deffect.h"
#include "ui_group.h"
#include "3Dmap.h"
#include "camera.h"
#include "selectcharacter.h"
#include "network.h"

/* ポーズ */
#include "pause.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CSelect::CSelect()
{
	m_nRand = 0;
	m_bReady = false;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CSelect::~CSelect()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CSelect::Init(void)
{
	// 初期化
	CSelectCharacter::InitStatic();
	// カメラのタイプ設定
	CManager::GetRenderer()->GetCamera()->SetType(CCamera::TYPE_FOLLOW);
	/* 初期化 */
	/* 作成 */
	// 3Dエフェクトの生成
	C3DEffect::Create();
	// 球の設定
	CMeshsphere::Create(D3DXVECTOR3(0.0f, 0.0f, 3000.0f),
		10000.0f);
	// 3Dマップ生成
	C3DMap::LoadCreate(C3DMap::MAP_STAGE_2);
	// 選択画面のUI生成
	CUi::LoadCreate(CUi::UITYPE_SELECTCHARACTER);
	// 選択キャラクターの生成
	// もし、キャラ選択決定した後に全プレイヤーの
	m_pSelectCharacter = CSelectCharacter::Create(
		CManager::GetPlayerID(),			// プレイヤー番号
		D3DXVECTOR3(200.0f, 0.0f, 200.0f)	// 位置
	);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CSelect::Uninit(void)
{
	// シーンの開放
	CScene::ReleaseAll();
	// シーンストップ解除
	CScene::UpdateStop(false);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CSelect::Update(void)
{
	CFade *pFade = CManager::GetFade();
	CNetwork *pNetwork = CManager::GetNetwork();
	CJoypad *pJoypad = CManager::GetJoy();

	// フェードしていないとき
	if (pFade->GetFade() == CFade::FADE_NONE)
	{
		if (!m_bReady)
		{// 準備中だったとき
			// 選択画面へ遷移
			if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_RETURN))
			{
				if (pNetwork != NULL)
				{
					char aData[64];
					sprintf(aData, "CHARACTER_TYPE %d", m_pSelectCharacter->GetCharacterType());
					pNetwork->SendTCP(aData, sizeof(aData));

					sprintf(aData, "READY %d", 1);
					pNetwork->SendTCP(aData, sizeof(aData));
					m_bReady = true;
					m_pSelectCharacter->SetReady(m_bReady);
				}
			}

			if (pJoypad != NULL)
			{
				if (pJoypad->GetTrigger(0, CJoypad::KEY_A))
				{
					if (pNetwork != NULL)
					{
						char aData[64];
						sprintf(aData, "CHARACTER_TYPE %d", m_pSelectCharacter->GetCharacterType());
						pNetwork->SendTCP(aData, sizeof(aData));

						sprintf(aData, "READY %d", 1);
						pNetwork->SendTCP(aData, sizeof(aData));
						m_bReady = true;
						m_pSelectCharacter->SetReady(m_bReady);
					}
				}
			}
		}
		else
		{// 準備完了していたとき
			if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_RETURN))
			{
				m_bReady = false;
				m_pSelectCharacter->SetReady(m_bReady);
			}

			if (pJoypad != NULL)
			{
				if (pJoypad->GetTrigger(0, CJoypad::KEY_A))
				{
					m_bReady = false;
					m_pSelectCharacter->SetReady(m_bReady);
				}
			}
		}
	}

	CDebugproc::Print("Rand = %d\n", m_nRand);
	int nAnswer = rand() % (100);
	if (nAnswer > 95)
	{
		m_nRand = nAnswer;
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CSelect::Draw(void)
{
}