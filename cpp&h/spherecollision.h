// ----------------------------------------------------------------------------------------------------
//
// SphereCollisionヘッダー処理の説明[spherecollision.h]
// Author : Koki Nishiyama
//
// ----------------------------------------------------------------------------------------------------

#ifndef _SPHERECOLLISION_H_
#define _SPHERECOLLISION_H_	 // ファイル名を基準を決める

// ----------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------
#include "collision.h"

// ----------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------
#define SPHERECOLLISION_MAX (128)

// ----------------------------------------------------------------------------------------------------
//
// SphereCollision種類
//
// ----------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------
//
// 構造体定義
//
// ----------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 名前定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 前方宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// クラス
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CSphereCollision : public CCollision
{
public:
	/* 列挙型 */
	/* 関数 */
	CSphereCollision();
	virtual ~CSphereCollision() {};
	virtual void Init(void) {};
	virtual void Uninit(void) {};
	virtual void Update(void) {};
	virtual void Draw(void) {};
#ifdef _DEBUG
	virtual void Debug(void) {};
#endif // _DEBUG
	CShape * const GetShape(void) { return m_pSphereShape.get(); };
	// 
	// 矩形クラスの当たり判定比較
	bool Judg(CRectShape * const RectShape);
	// 矩形クラスの当たり判定比較(押し出し処理)
	bool Judg(CRectShape * const RectShape, D3DXVECTOR3 * pPos);
	// 球クラスの当たり判定比較
	bool Judg(CSphereShape * const SphereShape);
	// 円柱クラスの当たり判定比較
	bool Judg(CColumnShape * const ColumnShape);
	// 設定
	// 作成処理(シーン管理)
	static CSphereCollision *Create(
		D3DXVECTOR3 const offset,
		D3DXVECTOR3 const &pos,
		float const &fRadius,
		OBJTYPE const &obj = OBJTYPE_ACTOR
	);
	// 作成処理(個人管理)
	static unique_ptr<CSphereCollision> Create_Self(
		D3DXVECTOR3 const offset,
		D3DXVECTOR3 const &pos,
		float const &fRadius,
		OBJTYPE const &obj = OBJTYPE_ACTOR
	);

protected:

private:
	// 変数宣言
	unique_ptr<CSphereShape> m_pSphereShape;	// 矩形
};

// ----------------------------------------------------------------------------------------------------
//
// プロトタイプ宣言
//
// ----------------------------------------------------------------------------------------------------

#endif