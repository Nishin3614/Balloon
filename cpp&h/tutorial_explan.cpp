// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// チュートリアル_説明文処理の説明[tutorial_explan.cpp]
// Author : Koki Nishiyama
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "tutorial_explan.h"
#include "rectcollision.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TUTORIAL_EXPLAN_POS (D3DXVECTOR3(200.0f,500.0f,0.0f))				// 説明文の位置
#define TUTORIAL_EXPLAN_SIZE (D3DXVECTOR2(300.0f,200.0f))					// 説明文のサイズ

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
D3DXVECTOR3 CTutorial_Explan::m_aCollisionpos[EXPLAN_MAX] =	// 当たり判定の位置
{
	D3DXVECTOR3(600.0f, 50.0f, 200.0f),
	D3DXVECTOR3(-200.0f, 500.0f, 200.0f),
	D3DXVECTOR3(-800.0f, 500.0f, 200.0f),
	D3DXVECTOR3(200.0f, 50.0f, 200.0f),
	D3DXVECTOR3(761.0f, 0.0f, -482.0f),
	D3DXVECTOR3(390.0f, 0.0f, 770.0f),
	D3DXVECTOR3(-643.0f, 0.0f, -481.0f)
};
D3DXVECTOR3 CTutorial_Explan::m_aCollisionSize[EXPLAN_MAX] = // 当たり判定のサイズ
{
	D3DXVECTOR3(200.0f, 200.0f, 200.0f),
	D3DXVECTOR3(400.0f, 1000.0f, 400.0f),
	D3DXVECTOR3(400.0f, 1000.0f, 400.0f),
	D3DXVECTOR3(200.0f, 1000.0f, 300.0f),
	D3DXVECTOR3(600.0f, 500.0f, 600.0f),
	D3DXVECTOR3(600.0f, 500.0f, 600.0f),
	D3DXVECTOR3(600.0f, 500.0f, 600.0f)
};
int CTutorial_Explan::m_nTexType[EXPLAN_MAX] =				// テクスチャータイプ
{
	72,73,74,76,75,75,75
};

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTutorial_Explan::CTutorial_Explan() : CScene_TWO::CScene_TWO()
{
	m_bDraw = false;
	m_Explan = EXPLAN_COIN;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTutorial_Explan::~CTutorial_Explan()
{

}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Init(void)
{
	// 説明文の生成
	// 位置設定
	CScene_TWO::SetPosition(TUTORIAL_EXPLAN_POS);
	// サイズ設定
	CScene_TWO::SetSize(TUTORIAL_EXPLAN_SIZE);
	// 初期化処理
	CScene_TWO::Init();
	// あたり判定生成
	CRectCollision::Create(
		m_aCollisionSize[m_Explan],
		D3DVECTOR3_ZERO,
		CCollision::OBJTYPE_ACTOR,
		this,
		NULL,
		false,
		false,
		&m_aCollisionpos[m_Explan]
	);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Uninit(void)
{
	CScene_TWO::Uninit();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Update(void)
{
	// 更新
	CScene_TWO::Update();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Draw(void)
{
	// 描画状態がfalseなら
	if (!m_bDraw) return;
	// 描画
	CScene_TWO::Draw();
}

#ifdef _DEBUG
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Debug(void)
{
	//CDebugproc::Print("所持しているチュートリアル_説明文の数[%d]\n", m_nBringTutorial_Explan);
	//CDebugproc::Print("出現しているチュートリアル_説明文の数[%d]\n", m_nPopTutorial_Explan);
	//CDebugproc::Print("チュートリアル_説明文[%d]pos(%.1f,%.1f,%.1f)\n",m_nActorId,m_pPos->x, m_pPos->y, m_pPos->z);
	std::string sNum = "Explan[" + std::to_string(m_Explan) + "]";

	if (ImGui::TreeNode(sNum.c_str()))
	{
		ImGui::DragFloat3("pos", m_aCollisionpos[m_Explan]);
		ImGui::TreePop();
	}
}
#endif // _DEBUG

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Scene_MyCollision(
	int const &nObjType,	// 相手のオブジェクトタイプ
	CScene * pScene			// 相手のシーン情報
)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Scene_OpponentCollision(
	int const &nObjType,	// オブジェクトタイプ
	CScene * pScene			// 相手のシーン情報
)
{
	// オブジェタイプがプレイヤーなら
	if (nObjType == CCollision::OBJTYPE_PLAYER)
	{
		m_bDraw = true;
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 自分から当たらなかった後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Scene_NoMyCollision(
	int const &nObjType,	// オブジェクトタイプ
	CScene * pScene			// 相手のシーン情報
)
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられなかった後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::Scene_NoOpponentCollision(
	int const &nObjType,	// オブジェクトタイプ
	CScene * pScene			// 相手のシーン情報
)
{
	// オブジェタイプがプレイヤーなら
	if (nObjType == CCollision::OBJTYPE_PLAYER)
	{
		m_bDraw = false;
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
//	nTexType	: テクスチャータイプ
//	nExplan		: 説明文カテゴリー
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTutorial_Explan * CTutorial_Explan::Create(
	int const &nExplan		// 説明文カテゴリー
)
{
	// 変数宣言
	CTutorial_Explan * pTutorial_Explan;		// シーン3Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pTutorial_Explan = new CTutorial_Explan();
	// シーン管理設定
	pTutorial_Explan->ManageSetting(CScene::LAYER_UI);
	// 説明文カテゴリーの設定
	pTutorial_Explan->m_Explan = (EXPLAN)nExplan;
	// 初期化処理
	pTutorial_Explan->Init();
	// テクスチャーの設定
	pTutorial_Explan->BindTexture(
		CTexture_manager::GetTexture(m_nTexType[pTutorial_Explan->m_Explan])
	);
	// 生成したオブジェクトを返す
	return pTutorial_Explan;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// リソース情報読み込む設定
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CTutorial_Explan::Load(void)
{
	return S_OK;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだリソース情報を開放する
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTutorial_Explan::UnLoad(void)
{

}